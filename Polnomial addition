#include <stdio.h>
#include <stdlib.h>

struct node
{
    float coeffi;
    int pow;
    struct node *next;
};

struct node *temp;

struct node *create_polynomial(struct node *head, float x, int y)
{
    struct node *newnode = (struct node *)malloc(sizeof(struct node));
    if (head == NULL)
    {
        temp = head = newnode;
        temp->next = NULL;
    }
    else
    {
        temp->next = newnode;
        temp = newnode;
    }
    temp->coeffi = x, temp->pow = y;
    temp->next = NULL;

    return head;
}

struct node *add_polynomials(struct node *temp1, struct node *temp2)
{
    struct node *add = NULL;
    struct node *newnode;
    while (temp1 != NULL && temp2 != NULL)
    {
        newnode = (struct node *)malloc((sizeof(struct node)));

        if (temp1->pow == temp2->pow)
        {
            if (add == NULL)
            {
                temp = add = newnode;
                temp->next = NULL;
            }
            else
            {
                temp->next = newnode;
                temp = newnode;
                temp->next = NULL;
            }
            temp->pow = temp1->pow;
            temp->coeffi = temp1->coeffi + temp2->coeffi;

            temp1 = temp1->next;
            temp2 = temp2->next;
        }
        else if (temp1->pow > temp2->pow)
        {
            if (add == NULL)
            {
                temp = add = newnode;
                temp->next = NULL;
            }
            else
            {
                temp->next = newnode;
                temp = newnode;
                temp->next = NULL;
            }
            temp->pow = temp1->pow;
            temp->coeffi = temp1->coeffi;

            temp1 = temp1->next;
        }
        else
        {
            if (add == NULL)
            {
                temp = add = newnode;
                temp->next = NULL;
            }
            else
            {
                temp->next = newnode;
                temp = newnode;
                temp->next = NULL;
            }
            temp->pow = temp2->pow;
            temp->coeffi = temp2->coeffi;

            temp2 = temp2->next;
        }
    }

    while (temp1 != NULL)
    {
        newnode = (struct node *)malloc(sizeof(struct node));
        temp->next = newnode;
        temp = newnode;
        temp->next = NULL;
        temp->coeffi = temp1->coeffi;
        temp->pow = temp1->pow;
        temp1 = temp1->next;
    }

    while (temp2 != NULL)
    {
        newnode = (struct node *)malloc(sizeof(struct node));
        temp->next = newnode;
        temp = newnode;
        temp->next = NULL;
        temp->coeffi = temp2->coeffi;
        temp->pow = temp2->pow;
        temp2 = temp2->next;
    }

    return add;
}

int main()
{
    printf("Enter 1st polynomial\n");
    float x;
    int y;
    struct node *head1 = NULL, *head2 = NULL;
    int choice = 1;
    while (choice != 0)
    {
        printf("Enter coefficient and power: ");
        scanf("%f %d", &x, &y);
        head1 = create_polynomial(head1, x, y);
        printf("Press 1 continue and 0 for exit: ");
        scanf("%d", &choice);
    }

    printf("Enter 2nd polynomail\n");
    choice = 1;
    while (choice != 0)
    {
        printf("Enter coefficient and power: ");
        scanf("%f %d", &x, &y);
        head2 = create_polynomial(head2, x, y);

        printf("Press 1 continue and 0 for exit: ");
        scanf("%d", &choice);
    }

    struct node *add = add_polynomials(head1, head2);

    temp=add;
    while(temp!=NULL){
        printf("(%f) x^ %d",temp->coeffi,temp->pow);
        temp=temp->next;
        if(temp!=NULL){
            printf(" + ");
        }
    }
    printf("=Â 0");
}
